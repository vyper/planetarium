#!/usr/bin/env ruby

$:.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'planetarium'

Main {
  version Planetarium::VERSION

  description <<-TXT
    Planetarium is a feed aggregator written in Ruby.
    
    Run 'planetarium [command] help' for more informations
  TXT

  mode(:update) {
    description 'Update planetarium'
  
    example <<-TXT
      $ planetarium update
      $ planetarium update -c config/config.yml
      $ planetarium update --config config/config.yml -t basic
      $ planetarium update --template basic
    TXT
    
    mixin :option_config, :option_export_path, :option_template
    
    run { Planetarium::Command.update(config, {:export_path => export_path, :template => template}) }
  }

  mode(:version) {
    description 'Show planetarium version'
    
    run { puts "Planetarium #{version}" }
  }
  
  mode(:list) {
    description 'List feeds in planetarium'
    
    mixin :option_config
    
    run { Planetarium::Command.list(config) }
  }
  
  mode(:add) {
    description 'Add a feed to planetarium'
    
    example <<-TXT
      $ planetarium add url_feed_to_remove
      $ planetarium add http://www.mcorp.com.br/feed/atom
      $ planetarium add http://www.leandroprado.com.br/feed/atom --config config/config.yml
      $ planetarium add http://www.mcorp.com.br/feed/atom -c config/config.yml
    TXT
    
    mixin :argument_url, :option_config
    
    run { 
      Planetarium::Command.add(config, url) 
    }
  }
  
  mode(:del) {
    description 'Remove a feed from planetarium'
    
    example <<-TXT
      $ planetarium del url_feed_to_remove
      $ planetarium del http://www.mcorp.com.br/feed/atom
      $ planetarium del http://www.leandroprado.com.br/feed/atom --config config/config.yml
      $ planetarium del http://www.mcorp.com.br/feed/atom -c config/config.yml
    TXT
    
    mixin :argument_url, :option_config
    
    run { 
      Planetarium::Command.del(config, url) 
    }
  }

  mode(:config) {
    description <<-TXT
      Configure the options for your planetarium.
      
      The available commands are:
        - list                    List settings for your planetarium
        - set                     Change options for your planetarium
    TXT
    
    example <<-TXT
      $ planetarium config list
      $ planetarium config set --name Planetarium
      $ planetarium config set --template basic
      $ planetarium config set --title Planetarium
      $ planetarium config set --name "WSO2 Brasil" --template wso2brasil
      $ planetarium config set --url http://www.wso2brasil.com.br/
      $ planetarium config set --name "WSO2 Brasil" --export_path /var/www/wso2brasil/
    TXT

    mixin :argument_command, :option_config, :option_name, :option_title, :option_url, :option_template, :option_export_path
    
    run {
      Planetarium::Command.config(config, command, { :name => name, :title => title, :url => url,
                                                     :template => template, :export_path => export_path })
    }
  }

  mixin(:argument_command) {
    argument(:command) {
      default 'list'
      attr
    }
  }

  mixin(:option_name) {
    option(:name) {
      optional
      argument :required
      desc 'Setting name your planetarium'
      attr
    }
  }

  mixin(:option_title) {
    option(:title) {
      optional
      argument :required
      desc 'Setting title your planetarium'
      attr
    }
  }

  mixin(:option_url) {
    option(:url) {
      optional
      argument :required
      desc 'Setting url your planetarium'
      attr
    }
  }

  mixin(:option_template) {
    option(:template) {
      optional
      argument :required
      desc 'Setting template your planetarium'
      attr
    }
  }

  mixin(:option_export_path) {
    option(:export_path) {
      optional
      argument :required
      desc 'Setting path to export your planetarium'
      attr
    }
  }

  mixin(:option_config) {
    option(:config, :c) {
      optional
      argument :required
      desc 'Location of the planetarium configuration file'
      attr
    }
  }

  mixin(:argument_url) {
    argument(:url) {
      attr
    }
  }
  
  run { help! }
}
